/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2018-01-11 08:39:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class error_002d404_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/Users/quzhinan/Documents/workspace/ienursing-prod-server/webapp/WEB-INF/lib/struts2-core-2.3.32.jar!/META-INF/struts-tags.tld", Long.valueOf(1488773180000L));
    _jspx_dependants.put("/WEB-INF/lib/struts2-core-2.3.32.jar", Long.valueOf(1515659608000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \n");
      out.write("    \"-//W3C//DTD XHTML 1.1 Transitional//EN\"\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
response.setStatus(HttpServletResponse.SC_OK);
      out.write("\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <link rel=\"shortcut icon\" href=\"images/icon.png\" >\n");
      out.write("    <title>エラー - 介護システム</title>\n");
      out.write("    <link type=\"text/css\" href=\"./styles/layout-main.css\" rel=\"stylesheet\" media=\"all\"/>\n");
      out.write("    <script src=\"/iemeeting/struts/utils.js\" type=\"text/javascript\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div id=\"page-main\" align=\"center\">\n");
      out.write("\t<h1>エラーメッセージ</h1>\n");
      out.write("\t<hr/>\n");
      out.write("\t<p>\n");
      out.write("\t");
if (exception != null && exception.getMessage() != null && exception.getMessage().equals("token.error")) {
      out.write("\n");
      out.write("\t    <FONT color=\"red\">不正なアクセス。</FONT>\n");
      out.write("\t");
} else {
      out.write("\n");
      out.write("\t    <FONT color=\"red\">URLが存在しません。</FONT>\n");
      out.write("\t");
}
      out.write("\n");
      out.write("\t</p>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<div id=\"button-box\" align=\"center\">\n");
      out.write("\t\t");
if (exception != null && exception.getMessage() != null && exception.getMessage().equals("token.error")) {
      out.write("\n");
      out.write("\t\t\t<a href=\"javascript:void(0);\" onclick=\"javascript:history.back();\"> 戻る </a>\n");
      out.write("\t\t\t<br/><br/>\n");
      out.write("\t\t\t<a href=\"logout.ies\"> ＞＞ ログイン画面へ </a>\n");
      out.write("\t\t");
} else {
      out.write("\n");
      out.write("\t\t\t<a href=\"logout.ies\"> ＞＞ ログイン画面へ </a>\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<br/>\n");
      out.write("\t<table width=\"100%\" class=\"main-content-box\" border=\"0\" cellSpacing=\"0\" cellPadding=\"0\">\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<td class=\"main-footer-line\"></td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<td class=\"main-footer-copyright\">\n");
      out.write("\t\t\t\t<table width=\"100%\" border=\"0\" cellSpacing=\"0\" cellPadding=\"0\">\n");
      out.write("\t   \t\t\t\t<tr>\n");
      out.write("\t   \t\t\t\t\t<!--\n");
      out.write("\t   \t\t\t\t\t<td class=\"main-footer-system-alias\">\n");
      out.write("\t\t\t   \t\t\t\t<img src=\"./images/logo-footer.png\" class=\"logo-footer\" />\n");
      out.write("\t\t   \t\t\t\t</td>\n");
      out.write("\t\t   \t\t\t\t-->\n");
      out.write("\t\t   \t\t\t\t<td class=\"main-footer-copyright\">\n");
      out.write("\t\t\t\t\t\t\tCopyright (c) Information Environment Solutions Co., LTD. All Rights Reserved.\n");
      out.write("\t\t   \t\t\t\t</td>\n");
      out.write("\t\t   \t\t\t\t<td class=\"main-footer-copyright\">\n");
      out.write("\t\t\t   \t\t\t\tシステムバージョン：1.1\n");
      out.write("\t\t   \t\t\t\t</td>\n");
      out.write("\t   \t\t\t\t</tr>\n");
      out.write("   \t\t\t\t</table>\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t</table>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
